Results for Tests on 5000 values

Depth = depth of tree, Cost = average #comparisons per search


             Ascending Order        Prefix Order        Random Order
Insert
Method       Depth      Cost     Depth      Cost     Depth      Cost

L            5000      4794.6    13        11.7      28         16

A            5000      1886.5    2954      1114.6    28         16.3

R            2492      951.5     1774      673.8     27         15.1

B            206       62.5      20        13.6      23         12

S            33        23.6      29        23.6      31         22.7

V            13        11.7      14        12.1      15         11.7

Notes (what the above indicates):
The AVL approach has the lowest cost of all the insert method. The algorithm works
well regardless of the input order, maintaining a low depth, making the cost of search very low.

Inserting at leaves method works best in prefix order, which is the best-case scenario
input data allowing it to have a low depth tree, however the worst-case scenario which
is the ascending order data would just create a linked list, making it very inefficient.

Having the input be at random order creates a low cost for every insert method,
this is because by by random chance it would create a relatively compact tree

